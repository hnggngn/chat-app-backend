// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewUser = `-- name: CreateNewUser :exec
insert into users (username, password, avatar)
values ($1, $2, $3)
`

type CreateNewUserParams struct {
	Username string      `json:"username"`
	Password string      `json:"password"`
	Avatar   pgtype.Text `json:"avatar"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) error {
	_, err := q.db.Exec(ctx, createNewUser, arg.Username, arg.Password, arg.Avatar)
	return err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
delete
from users
where username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUserByUsername, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, username, password, avatar, created_at, updated_at
from users
where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
